generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider          = "mongodb"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model CustomerPayment {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  paymentId        String           @unique
  customerId       String           @unique @db.ObjectId
  email            String?          @unique
  subscriptionType SubscriptionType @default(FREE)
  createdAt        DateTime?        @default(now())
  deletedAt        DateTime?
  updatedAt        DateTime?        @updatedAt

  customer User @relation(fields: [customerId], references: [id])

  @@map("customerPayments")
}

model Domain {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String    @db.ObjectId
  addedById   String    @db.ObjectId
  name        String
  subdomain   String?
  verified    Boolean?  @default(true)
  value       String?
  createdAt   DateTime? @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime? @updatedAt

  addedBy   User      @relation(fields: [addedById], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@map("domains")
}

model Member {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId String    @db.ObjectId
  email       String    @unique
  inviter     String
  invitedAt   DateTime? @default(now())
  joinedAt    DateTime?
  deletedAt   DateTime?
  updatedAt   DateTime? @updatedAt

  status    InvitationStatus @default(PENDING)
  teamRole  TeamRole         @default(MEMBER)
  member    User?            @relation(fields: [email], references: [email], name: "membership")
  invitedBy User?            @relation(fields: [inviter], references: [email], name: "inviter")
  workspace Workspace        @relation(fields: [workspaceId], references: [id])
  user      User?            @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([workspaceId, email])
  @@map("members")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userCode      String    @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  apikey        String?   @unique
  secret        String?   @unique
  image         String?
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt
  photo_url     String?
  phone_number  String?   @unique
  domain        String?
  company       String?
  role          String?
  active        Boolean?  @default(true)
  vaga_address  String?   @unique
  mnemonic      String?
  privateKey    String?
  publicKey     String?

  accounts             Account[]
  sessions             Session[]
  membership           Member[]               @relation("membership")
  invitedMembers       Member[]               @relation("inviter")
  createdWorkspace     Workspace[]
  customerPayment      CustomerPayment?
  domains              Domain[]
  Log                  Log[]
  Module               Module[]
  Contact              Contact[]
  Note                 Note[]
  Call                 Call[]
  Task                 Task[]
  ContactActivity      ContactActivity[]
  Company              Company[]
  Document             Document[]
  Deal                 Deal[]
  Member               Member?
  Ticket               Ticket[]
  Project              Project[]
  ProjectItem          ProjectItem[]
  ProjectItemComments  ProjectItemComments[]
  ProjectItemDocuments ProjectItemDocuments[]

  @@unique([userCode, email])
  @@fulltext([id, email, name, vaga_address])
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Workspace {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceCode String    @unique @default(cuid())
  inviteCode    String    @unique @default(cuid())
  creatorId     String    @db.ObjectId
  name          String
  slug          String
  createdAt     DateTime? @default(now())
  deletedAt     DateTime?
  updatedAt     DateTime? @updatedAt

  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members     Member[]
  domains     Domain[]
  Module      Module[]
  Contact     Contact[]
  Company     Company[]
  CRMSettings Crmsettings[]
  Ticket      Ticket[]

  @@unique([workspaceCode, inviteCode])
  @@map("workspaces")
}

model Log {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  action      String
  createdAt   DateTime? @default(now())
  ip          String?
  userId      String    @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("logs")
}

model Module {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById   String    @db.ObjectId
  email       String    @unique
  workspaceId String    @db.ObjectId
  network     String
  type        String
  moduleCode  String    @unique @default(cuid())
  name        String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  currency    String?
  moduleType  String?   @db.ObjectId
  active      Boolean?  @default(false)

  user        User          @relation(fields: [addedById], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  contact     Contact[]
  Company     Company[]
  Deal        Deal[]
  Crmsettings Crmsettings[]
  Ticket      Ticket[]

  @@map("modules")
}

model CustomerModule {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String  @unique
  companyName  String?
  language     String?
  timezone     String?
  fiscalYear   String?
  dateFormat   String?
  numberFormat String?
  vatNumber    String?
  phone        String?
  address      String?
  city         String?
  state        String?
  zip          String?
  country      String?
  website      String?
  logo         String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  @@map("customermodules")
}

model Contact {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String    @unique
  workspaceId        String    @db.ObjectId
  salutation         String?
  firstName          String
  lastName           String
  contactEmail       String
  phone              String?
  jobTitle           String?
  lifecycleStage     String?
  leadStatus         String?
  marketing          Boolean?
  city               String?
  state              String?
  country            String?
  street             String?
  zip                String?
  website            String?
  persona            String?
  timeZone           String?
  twitter_handle     String?
  preferred_language String?
  contactOwnerId     String    @db.ObjectId
  lastActivity       DateTime? @default(now())
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  moduleid           String?   @db.ObjectId
  photoUrl           String?
  bannerUrl          String?

  user            User              @relation(fields: [contactOwnerId], references: [id], onDelete: Cascade)
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  module          Module?           @relation(fields: [moduleid], references: [id])
  note            Note[]
  call            Call[]
  task            Task[]
  contactActivity ContactActivity[]
  company         Company?          @relation(fields: [companyId], references: [id])
  companyId       String?           @db.ObjectId
  document        Document[]
  deal            Deal[]
  ticket          Ticket[]
  Quote           Quote[]
  Invoice         Invoice[]

  @@map("contacts")
}

model Note {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById String    @db.ObjectId
  email     String    @unique
  contactId String    @db.ObjectId
  title     String
  note      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [addedById], references: [id], onDelete: Cascade)
  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id])

  @@map("notes")
}

model Call {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById String    @db.ObjectId
  email     String    @unique
  contactId String    @db.ObjectId
  outcome   String
  direction String
  date      DateTime?
  time      String?
  note      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [addedById], references: [id], onDelete: Cascade)
  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id])

  @@map("calls")
}

model Task {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById String    @db.ObjectId
  email     String    @unique
  contactId String    @db.ObjectId
  note      String
  title     String
  reminder  String?
  type      String
  priority  String?
  queue     String?
  assigned  String?
  date      DateTime?
  status    String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [addedById], references: [id], onDelete: Cascade)
  companyId String?  @db.ObjectId
  Company   Company? @relation(fields: [companyId], references: [id])

  @@map("tasks")
}

model ContactActivity {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  action      String
  createdAt   DateTime? @default(now())
  ip          String?
  userId      String    @db.ObjectId
  contactId   String    @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  companyId String? @db.ObjectId

  @@map("contactActivities")
}

model Company {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  workspaceId    String  @db.ObjectId
  companyDomain  String
  companyName    String
  industry       String
  type           String
  phone          String
  street         String
  city           String
  state          String
  zip            String
  country        String
  employees      String
  revenue        String
  timeZone       String
  description    String
  linkedin       String
  website        String
  companyOwnerId String  @db.ObjectId
  logoUrl        String?
  bannerUrl      String?

  lastActivity DateTime? @default(now())
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  moduleid     String?   @db.ObjectId

  user      User       @relation(fields: [companyOwnerId], references: [id], onDelete: Cascade)
  workspace Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  module    Module?    @relation(fields: [moduleid], references: [id])
  note      Note[]
  call      Call[]
  task      Task[]
  contacts  Contact[]
  document  Document[]
  deal      Deal[]
  ticket    Ticket[]
  Quote     Quote[]
  Invoice   Invoice[]

  @@map("companies")
}

model Document {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById    String    @db.ObjectId
  email        String    @unique
  companyId    String?   @db.ObjectId
  contactId    String?   @db.ObjectId
  dealId       String?   @db.ObjectId
  moduleId     String?   @db.ObjectId
  title        String
  documentUrl  String
  size         Int?
  type         String?
  lastModified Int?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  user    User     @relation(fields: [addedById], references: [id], onDelete: Cascade)
  Company Company? @relation(fields: [companyId], references: [id])
  contact Contact? @relation(fields: [contactId], references: [id])

  @@fulltext([title, type])
  @@map("documents")
}

model Deal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById   String    @db.ObjectId
  email       String    @unique
  dealName    String
  pipeline    String
  dealStage   String
  amount      String?
  closeDate   String?
  dealOwnerId String
  dealType    String?
  priority    String?
  contactId   String?   @db.ObjectId
  companyId   String?   @db.ObjectId
  projectId   String?   @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
  moduleid    String?   @db.ObjectId
  workspaceId String    @db.ObjectId
  aassignedTo String?   @db.ObjectId

  user    User      @relation(fields: [addedById], references: [id], onDelete: Cascade)
  company Company?  @relation(fields: [companyId], references: [id])
  contact Contact?  @relation(fields: [contactId], references: [id])
  module  Module?   @relation(fields: [moduleid], references: [id])
  ticket  Ticket[]
  Quote   Quote[]
  Invoice Invoice[]
  Project Project[]

  @@fulltext([id, email, dealName, dealStage, dealType, priority])
  @@map("deals")
}

model Crmsettings {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  companyName String?
  timezone    String?
  language    String?
  currency    String?
  country     String?
  vat         String?
  description String?
  email       String?
  street      String?
  city        String?
  state       String?
  zip         String?
  bank        String?
  iban        String?
  bic         String?
  logoUrl     String?
  workspaceId String    @db.ObjectId
  moduleid    String    @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  module    Module    @relation(fields: [moduleid], references: [id], onDelete: Cascade)

  @@map("crmSettings")
}

model Ticket {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById         String    @db.ObjectId
  email             String    @unique
  ticketName        String
  ticketDescription String
  pipeline          String?
  ticketStatus      String
  source            String
  ticketOwner       String
  priority          String?
  createDate        String
  assignedTo        String?
  associatedContact String?   @db.ObjectId
  associatedCompany String?   @db.ObjectId
  associatedDeal    String?   @db.ObjectId
  dealId            String?   @db.ObjectId
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt
  deletedAt         DateTime?

  contact     Contact?   @relation(fields: [associatedContact], references: [id])
  company     Company?   @relation(fields: [associatedCompany], references: [id])
  deal        Deal?      @relation(fields: [associatedDeal], references: [id])
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?    @db.ObjectId
  Module      Module?    @relation(fields: [moduleId], references: [id])
  moduleId    String?    @db.ObjectId
  user        User       @relation(fields: [addedById], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Quote {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById   String    @db.ObjectId
  dealId      String    @db.ObjectId
  email       String    @unique
  clientName  String
  quoteNumber String
  quoteDate   String
  quoteStatus String?
  street      String?
  clientId    String    @db.ObjectId
  zip         String?
  city        String?
  country     String?
  validUntil  String?
  subject     String?
  intro       String?
  item        Json?
  footer      String?
  note        String?
  moduleid    String?   @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  contact Contact @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deal    Deal    @relation(fields: [dealId], references: [id])

  @@map("quote")
}

model Invoice {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById     String    @db.ObjectId
  dealId        String    @db.ObjectId
  email         String    @unique
  clientName    String
  invoiceNumber String
  invoiceDate   String
  invoiceStatus String?
  street        String?
  clientId      String    @db.ObjectId
  zip           String?
  city          String?
  country       String?
  validUntil    String?
  subject       String?
  intro         String?
  item          Json?
  footer        String?
  note          String?
  moduleid      String?   @db.ObjectId
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  contact Contact @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deal    Deal    @relation(fields: [dealId], references: [id])

  @@map("invoice")
}

model Project {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById     String    @db.ObjectId
  email         String    @unique
  projectName   String
  projectType   String
  projectStatus String
  projectOwner  String
  priority      String?
  resolution    String?
  assignedTo    String?
  reporter      String?
  imageUrl      String?
  description   String
  startDate     String
  endDate       String
  dealId        String?   @db.ObjectId
  moduleId      String?   @db.ObjectId
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  user                 User                   @relation(fields: [addedById], references: [id], onDelete: Cascade)
  deal                 Deal?                  @relation(fields: [dealId], references: [id])
  ProjectItem          ProjectItem[]
  ProjectItemComments  ProjectItemComments[]
  ProjectItemDocuments ProjectItemDocuments[]

  @@map("project")
}

model ProjectItem {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById  String    @db.ObjectId
  projectId  String    @db.ObjectId
  email      String    @unique
  title      String
  itemStatus String
  itemOwner  String
  priority   String?
  boardId    Int?
  boardIndex Int?
  assignees  Json?
  chat       String?
  attachment String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?

  project   Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User                   @relation(fields: [addedById], references: [id], onDelete: Cascade)
  comments  ProjectItemComments[]
  documents ProjectItemDocuments[]

  @@map("projectItem")
}

model ProjectItemComments {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById String    @db.ObjectId
  projectId String    @db.ObjectId
  itemId    String    @db.ObjectId
  email     String    @unique
  comment   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  project Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  item    ProjectItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [addedById], references: [id], onDelete: Cascade)

  @@map("projectItemComments")
}

model ProjectItemDocuments {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addedById String    @db.ObjectId
  projectId String    @db.ObjectId
  itemId    String    @db.ObjectId
  email     String    @unique
  document  String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  project Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  item    ProjectItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [addedById], references: [id], onDelete: Cascade)

  @@map("projectItemDocuments")
}

model VagaSession {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  session      String    @unique
  txblob       String?
  account      String?
  dispatchedto String?
  amount       String?
  node         String?
  expired      Boolean?
  code         String?
  height       Int?
  hash         String?
  gasUsed      Int?
  gasWanted    Int?
  rawLog       String?
  gatewayURL   String?
  type         String?
  to           String?
  flag         Int?
  memo         String?
  nodeid       String?
  createdAt    DateTime? @default(now())
  expiresAt    Int?
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  @@map("vagaSession")
}

model pp_materials {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  vid                  String
  version              String
  material             String
  material_name        String
  material_description String?
  material_type        String?
  unit                 String?
  material_nr          String?
  division             String?
  product_allocation   String?
  material_status      String?
  material_group       String?
  office               String?
  valid_from           String?
  item_group           String?
  auth_group           String?
  gross_weight         String?
  net_weight           String?
  unit_weight          String?
  volume               String?
  size                 String?
  ean                  String?
  packaging_material   String?
  moduleid             String?   @db.ObjectId
  workspaceid          String?   @db.ObjectId
  addedbyid            String?   @db.ObjectId
  addedbyemail         String?
  createdAt            DateTime? @default(now())
  expiresAt            Int?
  updatedAt            DateTime? @updatedAt
  deletedAt            DateTime?

  @@map("pp_materials")
}

model pp_assignedMaterial {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  pp_materialsid   String  @db.ObjectId
  pp_productPassid String  @db.ObjectId
  addedbyid        String? @db.ObjectId
  addedbyemail     String?
  moduleid         String? @db.ObjectId
  workspaceid      String? @db.ObjectId

  createdAt DateTime? @default(now())
  expiresAt Int?
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  productPass pp_productPass @relation(fields: [pp_productPassid], references: [id])

  @@map("pp_assignedMaterial")
}

model pp_locations {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  vid                  String
  location_name        String
  street               String?
  postal               String?
  city                 String?
  country              String?
  po_box               String?
  po_code              String?
  language             String?
  phone                String?
  fax                  String?
  email                String?
  standard_comm_method String?
  is_plant             Boolean?
  plant_id             String?
  plant_name           String?
  fork_lift            Boolean?
  lift_gate            Boolean?
  loading_dock         Boolean?
  photo_allowed        Boolean?
  floor_protection     Boolean?
  insurance            Boolean?
  union_labor          Boolean?
  height_limit         String?
  security_clearance   Boolean?
  docking_from         String?
  docking_to           String?
  max_truck_size       String?
  moduleid             String?   @db.ObjectId
  workspaceid          String?   @db.ObjectId
  addedbyid            String?   @db.ObjectId
  addedbyemail         String?
  createdAt            DateTime? @default(now())
  expiresAt            Int?
  updatedAt            DateTime? @updatedAt
  deletedAt            DateTime?

  @@map("pp_locations")
}

model pp_inventory {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  vid                String
  available_quantity String
  batch              String
  certificate_number String
  document_number    String
  product            String
  quantity           String
  storage_id         String
  storage_location   String
  storage_type       String
  total_stock        String
  deposit_refund     String
  deposit_id         String
  weight             String
  moduleid           String?   @db.ObjectId
  workspaceid        String?   @db.ObjectId
  addedbyid          String?   @db.ObjectId
  addedbyemail       String?
  createdAt          DateTime? @default(now())
  expiresAt          Int?
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?

  @@map("pp_inventory")
}

model pp_productPass {
  id                             String    @id @default(auto()) @map("_id") @db.ObjectId
  vid                            String    @unique
  version                        String
  identification                 String
  identification_value           String
  product_name                   String
  parent_organization            String
  brand                          String?
  product_description            String?
  intended_sale                  String?
  season                         String?
  retail_price                   String?
  companyid                      String?
  currency_code                  String?
  size                           String?
  product_color                  String?
  age_group                      String?
  gender                         String?
  categorization_standard        String?
  product_family                 String?
  product_category               String?
  country_origin                 String?
  manufacturing_facility         String?
  manufacturing_name             String?
  material_traceability_provider String?
  material_type                  String?
  finishes                       String?
  material_certifications        String?
  net_weight                     String?
  id_type                        String?
  id_material                    String?
  id_location                    String?
  id_type_value                  String?
  id_material_value              String?
  id_location_value              String?
  material_composition           String?
  deposit                        Boolean?
  product_website                String?
  contractAddress                String?   @unique
  materiallistid                 String?   @db.ObjectId
  moduleid                       String?   @db.ObjectId
  workspaceid                    String?   @db.ObjectId
  addedbyid                      String?   @db.ObjectId
  addedbyemail                   String?
  createdAt                      DateTime? @default(now())
  expiresAt                      Int?
  updatedAt                      DateTime? @updatedAt
  deletedAt                      DateTime?
  registered_companyId           String?   @db.ObjectId

  registered_company  registered_company?   @relation(fields: [registered_companyId], references: [id])
  pp_productImages    pp_productImages[]
  pp_productDocuments pp_productDocuments[]
  pp_assignedMaterial pp_assignedMaterial[]
  pp_subProductpass   pp_subProductpass[]

  @@map("pp_productPass")
}

model pp_subProductpass {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  vid              String    @unique
  passid           String    @unique
  pp_productPassid String    @db.ObjectId
  tokenid          String
  name            String?
  description     String?
  location        String?
  ean             String?
  contractAddress  String?   @unique
  moduleid         String?   @db.ObjectId
  workspaceid      String?   @db.ObjectId
  addedbyid        String?   @db.ObjectId
  addedbyemail     String?
  createdAt        DateTime? @default(now())
  expiresAt        Int?
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  productPass pp_productPass @relation(fields: [pp_productPassid], references: [id], onDelete: Cascade)
  pp_checkIn  pp_checkIn[]
  pp_checkOut pp_checkOut[]

  @@map("pp_subProductpass")
}

model pp_productImages {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  pp_productPassid String    @db.ObjectId
  vid              String    @unique
  addedbyid        String?   @db.ObjectId
  addedbyemail     String?
  type             String?
  size             Int?
  name             String?
  workspaceid      String?   @db.ObjectId
  moduleid         String?   @db.ObjectId
  createdAt        DateTime? @default(now())
  expiresAt        Int?
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  productPass pp_productPass @relation(fields: [pp_productPassid], references: [id], onDelete: Cascade)

  @@map("pp_productImages")
}

model pp_productDocuments {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  pp_productPassid String    @db.ObjectId
  vid              String    @unique
  addedbyid        String?   @db.ObjectId
  addedbyemail     String?
  type             String?
  size             Int?
  name             String?
  workspaceid      String?   @db.ObjectId
  moduleid         String?   @db.ObjectId
  createdAt        DateTime? @default(now())
  expiresAt        Int?
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  productPass pp_productPass @relation(fields: [pp_productPassid], references: [id], onDelete: Cascade)

  @@map("pp_productDocuments")
}

model pp_checkIn {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  pp_productPassid    String    @db.ObjectId
  vid                 String    @unique
  name                String
  description         String?
  batch               String?
  lat                 String
  lng                 String
  pp_subProductpassid String?   @db.ObjectId
  createdAt           DateTime? @default(now())
  expiresAt           Int?
  updatedAt           DateTime? @updatedAt
  deletedAt           DateTime?

  pp_subProductpass pp_subProductpass? @relation(fields: [pp_subProductpassid], references: [id])

  @@map("pp_checkIn")
}

model pp_checkOut {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  pp_productPassid    String    @db.ObjectId
  vid                 String    @unique
  name                String
  description         String?
  batch               String?
  lat                 String
  lng                 String
  pp_subProductpassid String?   @db.ObjectId
  createdAt           DateTime? @default(now())
  expiresAt           Int?
  updatedAt           DateTime? @updatedAt
  deletedAt           DateTime?

  pp_subProductpass pp_subProductpass? @relation(fields: [pp_subProductpassid], references: [id])

  @@map("pp_checkOut")
}

model registered_company {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  companyid            String?
  applicationid        String?
  company_name         String
  company_reg_number   String
  contact_name         String
  contact_email        String
  contact_phone        String?
  account_type         String?
  industry             String?
  registration_country String?
  registration_city    String?
  reg_doc              String?
  workspace            String?   @unique
  date_registered      Int?
  status               String?
  workspaceid          String?   @db.ObjectId
  addedbyid            String?   @db.ObjectId
  addedbyemail         String?
  createdAt            DateTime? @default(now())
  expiresAt            Int?
  updatedAt            DateTime? @updatedAt
  deletedAt            DateTime?

  registered_brand registered_brand[]
  pp_productPass   pp_productPass[]

  @@map("registered_company")
}

model registered_brand {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  brandid              String?
  name                 String
  description          String?
  url                  String?
  registered_companyid String    @db.ObjectId
  addedbyid            String?   @db.ObjectId
  addedbyemail         String?
  createdAt            DateTime? @default(now())
  expiresAt            Int?
  updatedAt            DateTime? @updatedAt
  deletedAt            DateTime?

  registered_company registered_company? @relation(fields: [registered_companyid], references: [id])

  @@map("registered_brand")
}

enum InvitationStatus {
  ACCEPTED
  PENDING
  DECLINED
}

enum SubscriptionType {
  FREE
  STANDARD
  PREMIUM
}

enum TeamRole {
  MEMBER
  OWNER
}
